// üì¶ Importamos las funciones necesarias desde otros archivos
import { uploadImage, saveConfigToFirestore, getConfigFromFirestore } from "../storage.js";
import { auth, db, firebaseConfig, storage } from "../firebase.js";
import { showmessage } from "../showmessage.js";
import "../cerrar_sesion.js";  // üîí Manejamos el cierre de sesi√≥n
import { initMenuConfig } from "./menuConfig.js";

// üü¢ Inicializar configuraci√≥n del men√∫ cuando la p√°gina cargue
document.addEventListener("DOMContentLoaded", function () {
  initMenuConfig();
});


// üü¢ Evento que se ejecuta cuando la p√°gina ha cargado completamente
document.addEventListener("DOMContentLoaded", async function () {
  const loadingElement = document.getElementById("loading"); // üîπ Referencia al loader

  try {
    loadingElement.style.display = "flex"; // üîπ Mostrar loader

    const config = await getConfigFromFirestore();

    if (config) {
      document.getElementById("restaurantName").value = config.restaurantName || "";
      if (config.logo) document.querySelector(".logo").src = config.logo;
      if (config.background) document.querySelector(".background-image").style.backgroundImage = `url(${config.background})`;
    }
  } catch (error) {
    showmessage("‚ùå Error al cargar configuraci√≥n.", "error");
    console.error("‚ùå Error al cargar configuraci√≥n:", error);
  } finally {
    loadingElement.style.display = "none"; // üîπ Ocultar loader despu√©s de la carga
  }
});


// üîπ Evento que se ejecuta cuando el usuario guarda la configuraci√≥n
document.getElementById("saveConfig").addEventListener("click", async function () {
  // üì¶ Capturamos los valores ingresados en los inputs
  const restaurantName = document.getElementById("restaurantName").value;
  const logoInput = document.getElementById("logoUpload").files[0];  // üñºÔ∏è Archivo de logo
  const backgroundInput = document.getElementById("backgroundUpload").files[0];  // üé® Archivo de fondo

  try {
    // üîπ Obtenemos la configuraci√≥n actual de Firestore para mantener los valores previos
    const currentConfig = await getConfigFromFirestore();

    let logoURL = currentConfig.logo || null;  // üñºÔ∏è Mantener logo anterior si no se sube uno nuevo
    let backgroundURL = currentConfig.background || null;  // üé® Mantener fondo anterior si no se sube uno nuevo

    // üì§ Subimos las im√°genes a Firebase Storage si el usuario seleccion√≥ alguna nueva
    if (logoInput) logoURL = await uploadImage(logoInput, "logo.png");
    if (backgroundInput) backgroundURL = await uploadImage(backgroundInput, "background.png");

    // üì¶ Creamos un objeto con la nueva configuraci√≥n, asegurando que los valores previos sean respetados
    const updatedConfig = {
      restaurantName: restaurantName || currentConfig.restaurantName,  // ‚úÖ Si no se cambia el nombre, mantener el anterior
      logo: logoURL,  // ‚úÖ Mantiene la imagen anterior si no se sube una nueva
      background: backgroundURL  // ‚úÖ Mantiene la imagen anterior si no se sube una nueva
    };

    // üíæ Guardamos la configuraci√≥n actualizada en Firestore
    await saveConfigToFirestore({
      restaurantName: updatedConfig.restaurantName,
      logo: updatedConfig.logo,
      background: updatedConfig.background
    }, "admin");


    // üîÑ Actualizamos la vista con los nuevos valores guardados
    if (updatedConfig.logo) document.querySelector(".logo").src = updatedConfig.logo;
    if (updatedConfig.background) document.querySelector(".background-image").style.backgroundImage = `url(${updatedConfig.background})`;

    // üü¢ Cerrar modal con Bootstrap despu√©s de guardar
    const modalElement = document.getElementById("configModal");
    const modalInstance = bootstrap.Modal.getInstance(modalElement);
    if (modalInstance) modalInstance.hide();

    // ‚úÖ Notificamos al usuario que la configuraci√≥n se guard√≥ correctamente
    showmessage("‚úî Configuraci√≥n guardada correctamente.", "success");

  } catch (error) {
    // ‚ùå Si hay un error, lo notificamos
    showmessage("‚ùå Error al guardar la configuraci√≥n.", "error");
    console("‚ùå Error al guardar la configuraci√≥n.", error);
    // alert("‚ùå Error al guardar la configuraci√≥n.");
  }
});


const cerrarSesionBtn = document.getElementById("logout");

cerrarSesionBtn.addEventListener("click", () => {
  // showmessage("Cerrando sesi√≥n...", "warning"); // Mostrar mensaje de "Cerrando sesi√≥n" por 1 segundo (1000 ms)
  setTimeout(() => {
    window.location.href = "../index.html"; // Redirigir a la p√°gina "../index.html" despu√©s de 1 segundo
  }, 1000);
});